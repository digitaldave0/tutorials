{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3.8.5 64-bit",
   "metadata": {
    "interpreter": {
     "hash": "31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Numbers, Collections\n3 3 3.0\n['apple', 'banana', 'cherry', 'pear']\nPython is awesome\n7\nPython is awesome\nShows Multiline\nThe quick brown fox jumps over the lazy dog\" is an English-language pangram—a sentence that contains all of the letters of the English alphabet. Owing to its brevity and coherence, it has become widely known\n\n---------\nstring manipulation\nP\nP\ny\nt\nh\no\nn\n,\n \ni\ns\n,\n \na\nw\ne\ns\no\nm\ne\n19\nTrue\nYes, Python is awesome, its like powershell in many ways\nNo fox is not is b1\n---------\nSlicing Strings\ntho\nPytho\nthon, is, awesome\nPYTHON, IS, AWESOME\npython, is, awesome\nPython is awesome\nPython, is, rocks\n['Python', ' is', ' awesome']\n---------\nstring concatenation\nfredjones\nfred jones\nMy Name is \"Joe\"\tand I'm 20\nI want 3 items from item number 400 for 2.8 GBP. each\n\"Psychological\" manipulation is a type of social influence that aims to change the behavior\nor perception of others through indirect 'deceptive', or underhanded tactics.\n\"psychological\" manipulation is a type of social influence that aims to change the behavior\nor perception of others through indirect 'deceptive', or underhanded tactics.    \nCount is 1\tWord is 16\n---------\nb is greater than a\nTrue\nTrue\nTrue\nTrue\nFalse\nFalse\nTrue\n---------\n4\n<class 'list'>\n---------\n{'brand': 'Ford', 'model': 'Focus', 'year': '2020'}\nFord\n3\n<class 'dict'>\nFocus\ndict_keys(['brand', 'model', 'year'])\ndict_keys(['brand', 'model', 'year', 'colour'])\ndict_values(['Ford', 'Focus', '2020', 'red'])\nmodel is one of the keys found\n"
     ]
    }
   ],
   "source": [
    "#clear screen\n",
    "\n",
    "def clear_my_screen():\n",
    "  import os\n",
    "  os.system('clear')  # on linux\n",
    "\n",
    " \n",
    "# define varibles\n",
    "\n",
    "a = 5\n",
    "a1 = \"\"\"The quick brown fox jumps over the lazy dog\" is an English-language pangram—a sentence that contains all of the letters of the English alphabet. Owing to its brevity and coherence, it has become widely known\n",
    "\"\"\"\n",
    "a2 = '''The quick brown fox jumps over the lazy dog\" is an English-language pangram—a sentence that contains all of the letters of the English alphabet. Owing to its brevity and coherence, it has become widely known\n",
    "'''\n",
    "\n",
    "b = \"Hello World!\"\n",
    "b1 = \"Python, is, awesome\"\n",
    "b2 = \"Python is awesome   \"\n",
    "c, d, e = \"Jack\", \"Joe\",\"Jake\"\n",
    "f = g = h = \"Jane\"\n",
    "i = \"awesome\"\n",
    "j = 1j\n",
    "k = range(6)\n",
    "l = \"True\"\n",
    "m = b\"Python\"\n",
    "n = bytearray(5)\n",
    "p = memoryview(bytes(5))\n",
    "\n",
    " \n",
    "\n",
    "# collections list,tuple,dictionary, set\n",
    "\n",
    "fruits_list = [\"apple\",\"banana\",\"cherry\",\"pear\"]\n",
    "fruits_tuple = (\"apple\",\"banana\",\"cherry\",\"pear\")\n",
    "fruits_dict = {\"Name\": \"banana\" , \"number\" :  20}\n",
    "fruits_set = (\"apple\",\"banana\",\"cherry\",\"pear\")\n",
    "\n",
    " \n",
    "# types of number\n",
    "\n",
    "x = str(3)\n",
    "y = int(3)\n",
    "z = float(3)\n",
    "\n",
    " \n",
    "\n",
    "\"\"\" simple if\n",
    "print(b)\n",
    "if a > 2:\n",
    "  print(\"Five is greater than two!\")\n",
    "\"\"\"\n",
    "\n",
    " \n",
    "\n",
    "print (\"Numbers, Collections\")\n",
    "\n",
    "# print types of number \n",
    "print (x, y,  z)\n",
    "\n",
    "# print collections\n",
    "print (fruits_list)\n",
    "\n",
    " \n",
    "# print examples\n",
    "print (\"Python is \" + i)\n",
    "print (a + 2)\n",
    "\n",
    "\n",
    "# function global works outside of function\n",
    "\n",
    "def mytest():\n",
    "  global x\n",
    "  x = \"awesome\"\n",
    " \n",
    "\n",
    "mytest()\n",
    "print (\"Python is \" + x)\n",
    " \n",
    "\n",
    "\n",
    "\n",
    " \n",
    "\n",
    "# print multiline strings\n",
    "\n",
    "print (\"Shows Multiline\")\n",
    "\n",
    "print(a1)\n",
    "\n",
    " \n",
    "\n",
    "print (\"---------\")\n",
    "\n",
    " \n",
    "\n",
    "#strings\n",
    "\n",
    "print (\"string manipulation\")\n",
    "\n",
    "print (b1[0]) # print first chr of string b1\n",
    "\n",
    " \n",
    "\n",
    "for x in b1:  # loop through strings in b1\n",
    "\n",
    "  print (x)\n",
    "\n",
    "\n",
    "print (len(b1)) # print the length of b1\n",
    "\n",
    " \n",
    "\n",
    "print (\"awesome\" in b1) # check if word is true in b1\n",
    "\n",
    " \n",
    "\n",
    "if \"awesome\" in b1: # use if to see if word is true and print response.\n",
    "\n",
    "  print (\"Yes, Python is awesome, its like powershell in many ways\")\n",
    "\n",
    " \n",
    "\n",
    "fox = \"fox\" \n",
    "\n",
    "if (fox) not in b1:\n",
    "\n",
    "  print (\"No fox is not is b1\") # this is false as the word fox is not in b1\n",
    "\n",
    " \n",
    "\n",
    "print (\"---------\") \n",
    "\n",
    " \n",
    "\n",
    "print (\"Slicing Strings\")\n",
    "\n",
    "#slicing strings\n",
    "\n",
    " \n",
    "\n",
    "print(b1[2:5]) # ping postion 2 and 5 of b1\n",
    "\n",
    " \n",
    "\n",
    "print (b1[:5]) # slice from start to postion 5\n",
    "\n",
    "print (b1[2:]) # slice from postion 2 to the end\n",
    "\n",
    " \n",
    "\n",
    "print(b1.upper()) # print b1 uppercase\n",
    "\n",
    "print(b1.lower()) # print b1 lowercase\n",
    "\n",
    "print(b2.strip()) # strip whitespaces out of b2\n",
    "\n",
    "print(b1.replace(\"awesome\",\"rocks\")) #replace words in string\n",
    "\n",
    "print(b1.split(\",\")) # split string where \",\" result is ['Python', ' is', ' awesome']\n",
    "\n",
    " \n",
    "\n",
    "print (\"---------\") \n",
    "\n",
    " \n",
    "\n",
    "print (\"string concatenation\")\n",
    "\n",
    "# string concatenation\n",
    "\n",
    "f_name = \"fred\"\n",
    "\n",
    "s_name = \"jones\"\n",
    "\n",
    " \n",
    "\n",
    "full_name = f_name + s_name #combine strings\n",
    "\n",
    "print(full_name)\n",
    "\n",
    " \n",
    "\n",
    "full_name = f_name + \" \" + s_name\n",
    "\n",
    "print(full_name)  # combine strings with added space\n",
    "\n",
    " \n",
    "\n",
    "age = 20\n",
    "\n",
    "txt = \"My Name is \\\"Joe\\\"\\t\" \"and I'm {}\" #using /t tab and format for placeholder\n",
    "\n",
    "print(txt.format(age))\n",
    "\n",
    " \n",
    "\n",
    "quanitity = 3\n",
    "\n",
    "itemno = 400\n",
    "\n",
    "price = 2.80\n",
    "\n",
    "order = \"I want {} items from item number {} for {} GBP. each\" # format() takes unlimited arguments, and places them into {} placeholders.\n",
    "\n",
    "print (order.format(quanitity,itemno,price))\n",
    "\n",
    " \n",
    "\n",
    "txt = \"\\\"Psychological\\\" manipulation is a type of social influence that aims to change the behavior\\n\" \"or perception of others through indirect \\'deceptive\\'\" \", or underhanded tactics.    \"\n",
    "\n",
    "print(txt.strip()) # using double quotes under \"Psychological\" using newline in string after \"behavior\" and using single quotes in \"deceptive\"\n",
    "\n",
    " \n",
    "\n",
    "txt2 = \"The bright moon shone in the night sky\"\n",
    "\n",
    "print(txt.capitalize()) # capitalize quote txt\n",
    "\n",
    "my_count = txt2.count(\"shone\") # count number of word in shone\n",
    "\n",
    "my_find = txt2.find(\"shone\") #find the word shone in txt2\n",
    "\n",
    "my_answer = \"Count is {}\"\"\\t\" \"Word is {}\" # format with placeholder and /t tab\n",
    "\n",
    "print(my_answer.format(my_count,my_find)) #show results\n",
    "\n",
    " \n",
    "\n",
    " \n",
    "\n",
    " \n",
    "\n",
    "clear_my_screen()\n",
    "\n",
    "print (\"---------\") \n",
    "\n",
    "a = 300\n",
    "\n",
    "b = 500\n",
    "\n",
    "c = \"somestring\"\n",
    "\n",
    "d = \"\"\n",
    "\n",
    "e = ([])\n",
    "\n",
    " \n",
    "\n",
    "if b > a:\n",
    "\n",
    "  print (\"b is greater than a\")\n",
    "\n",
    "else:\n",
    "\n",
    "  print (\"b is not greater than a\")\n",
    "\n",
    " \n",
    "\n",
    "'''all below return true\n",
    "\n",
    "'''\n",
    "\n",
    "print(bool(a))\n",
    "\n",
    "print(bool(b))\n",
    "\n",
    "print(bool(c))\n",
    "\n",
    "print(bool(fruits_dict))\n",
    "\n",
    " \n",
    "\n",
    "''' d, e have empty values and will return false\n",
    "\n",
    "'''\n",
    "\n",
    "print(bool(d))\n",
    "\n",
    "print(bool(e))\n",
    "\n",
    " \n",
    "\n",
    "#check is instance an integer\n",
    "\n",
    " \n",
    "\n",
    "print(isinstance(a,int))\n",
    "\n",
    " \n",
    "\n",
    "clear_my_screen()\n",
    "\n",
    "print (\"---------\")\n",
    "\n",
    " \n",
    "\n",
    "#lists\n",
    "\n",
    " \n",
    "\n",
    "print(len(fruits_list)) # returns 4 items in fruits_list\n",
    "\n",
    "print(type(fruits_list)) # type of list\n",
    "\n",
    " \n",
    "\n",
    "\n",
    " \n",
    "\n",
    "#dictonary\n",
    "\n",
    " \n",
    "\n",
    "clear_my_screen()\n",
    "\n",
    "print (\"---------\")\n",
    "\n",
    "my_car_dict = {\n",
    "\n",
    "\"brand\": \"Ford\",\n",
    "\n",
    "\"model\": \"Focus\",\n",
    "\n",
    "\"year\": \"2001\",\n",
    "\n",
    "\"year\": \"2020\"\n",
    "\n",
    "}\n",
    "\n",
    " \n",
    "\n",
    "print(my_car_dict) #dictonary will overwrite year with latest they are unordered\n",
    "\n",
    "print(my_car_dict[\"brand\"])\n",
    "\n",
    "print(len(my_car_dict))\n",
    "\n",
    "print(type(my_car_dict))\n",
    "\n",
    "x = my_car_dict[\"model\"]\n",
    "\n",
    "print (x)\n",
    "\n",
    "x = my_car_dict.keys()\n",
    "\n",
    "print(x)\n",
    "\n",
    "my_car_dict[\"colour\"] = \"red\"\n",
    "\n",
    "print(x)\n",
    "\n",
    "x = my_car_dict.values()\n",
    "\n",
    "print(x)\n",
    "\n",
    " \n",
    "\n",
    "if \"model\" in my_car_dict:\n",
    "  print (\"model is one of the keys found\")\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "['ford', 'vauxhall', 'bmw', 'mazda', 'Renault ']\nRenault\n['ford', 'vauxhall', 'bmw']\nYes, 'bmw is in the list\n['ford', 'vauxhall', 'bmw', 'mazda', 'Peugeot']\n['ford', ('vw', 'jaguar'), 'bmw', 'mazda', 'Peugeot']\n['ford', ('vw', 'jaguar'), 'bmw', 'landrover', 'mazda', 'Peugeot']\n['ford', ('vw', 'jaguar'), 'bmw', 'landrover', 'mazda', 'Peugeot', 'seat']\n['ford', ('vw', 'jaguar'), 'bmw', 'landrover', 'mazda', 'Peugeot', 'seat', 'audi', 'citroen', 'honda']\n['ford', ('vw', 'jaguar'), 'bmw', 'landrover', 'mazda', 'Peugeot', 'seat', 'audi', 'honda']\n['ford', 'bmw', 'landrover', 'mazda', 'Peugeot', 'seat', 'audi', 'honda']\n['ford', 'bmw', 'landrover', 'mazda', 'Peugeot', 'seat', 'audi']\n[]\nFord\nVauxhall\nBmw\nMazda\nRenault\nAudi\n[0]\n[1]\n[2]\n[3]\n[4]\n[5]\nford\nvauxhall\nbmw\nmazda\nRenault\naudi\nford\nvauxhall\nbmw\nmazda\nRenault\naudi\n['BMW']\n['Renault', 'audi', 'bmw', 'ford', 'mazda', 'vauxhall']\n['vauxhall', 'mazda', 'ford', 'bmw', 'audi', 'Renault']\n['audi', 'bmw', 'ford', 'mazda', 'Renault', 'vauxhall']\n['vauxhall', 'Renault', 'mazda', 'ford', 'bmw', 'audi']\n['vauxhall', 'Renault', 'mazda', 'ford', 'bmw', 'audi']\n['vauxhall', 'Renault', 'mazda', 'ford', 'bmw', 'audi', 'audi', 'citroen', 'honda']\n"
     ]
    }
   ],
   "source": [
    "#list constructor\n",
    "\n",
    "\n",
    "my_list = list((\"ford\",\"vauxhall\",\"bmw\",\"mazda\",\"Renault \")) # create list with constuctor\n",
    "print (my_list) # print created list\n",
    "\n",
    " \n",
    "\n",
    "my_car_list = [\"ford\",\"vauxhall\",\"bmw\",\"mazda\",\"Renault\"] # create dictionary list\n",
    "print (my_car_list[-1]) # last item in list \"renualt\"\n",
    "print (my_car_list[0:3]) # range index \"ford, \"vauxhall\" and \"bmw\"\n",
    "\n",
    " \n",
    "\n",
    "#check if item in list exists\n",
    "\n",
    "if \"bmw\" in my_car_list:\n",
    "    print (\"Yes, 'bmw is in the list\")\n",
    "\n",
    "   \n",
    "\n",
    "#Change item in my_car_list\n",
    "\n",
    "my_car_list[4] = \"Peugeot\"\n",
    "print(my_car_list) # swap \"Renault\" for \"peugeot\"\n",
    "\n",
    " \n",
    "\n",
    "#replace one value with two\n",
    "my_car_list[1]= (\"vw\",\"jaguar\") #replace vauxhall with vw and jaguar\n",
    "print(my_car_list)\n",
    "\n",
    " \n",
    "\n",
    "#insert items in list\n",
    "my_car_list.insert(3,\"landrover\")\n",
    "print (my_car_list)\n",
    "\n",
    " \n",
    "\n",
    "#append to list\n",
    "my_car_list.append(\"seat\")\n",
    "print(my_car_list)\n",
    "\n",
    " \n",
    "\n",
    "#extend list with new items in other list\n",
    "my_car_list_updates = [\"audi\",\"citroen\",\"honda\"]\n",
    "my_car_list.extend(my_car_list_updates)\n",
    "print(my_car_list)\n",
    "\n",
    " \n",
    "\n",
    "my_car_list.remove(\"citroen\")\n",
    "print(my_car_list)  # remove citroen from list\n",
    " \n",
    "\n",
    "my_car_list.pop(1)\n",
    "print(my_car_list) # remove 2nd item from list\n",
    " \n",
    "\n",
    "my_car_list.pop()\n",
    "print(my_car_list) # remove last item from list honda\n",
    "\n",
    " \n",
    "#delete entire list\n",
    "\n",
    "#del my_car_list\n",
    "\n",
    "#clear the list content\n",
    "\n",
    "my_car_list.clear()\n",
    "print (my_car_list) # list remains but no items in list.\n",
    "\n",
    " \n",
    "#loop through items in my_car_list\n",
    "\n",
    "my_car_list = [\"ford\",\"vauxhall\",\"bmw\",\"mazda\",\"Renault\",\"audi\"] # reload my_car_list after clear\n",
    "\n",
    "for x in my_car_list:\n",
    "  print (x.capitalize())\n",
    "\n",
    " \n",
    "\n",
    "#loop through index numbers\n",
    "\n",
    "for i in range(len(my_car_list)):\n",
    "    print([i])\n",
    " \n",
    "\n",
    "#while loop all index numbers in dictionary\n",
    "\n",
    "i = 0 # start at 0\n",
    "while i < len(my_car_list): # while length of my_car_list is higher than 0\n",
    "  print(my_car_list[i]) # print the value of item in my_car_list\n",
    "  i = i + 1  # increment by 1 and continue until you reach my_car_list length\n",
    " \n",
    "\n",
    "#list comprehension\n",
    "\n",
    "[print(x) for x in my_car_list]\n",
    "\n",
    "#create new list if bmw is in original list with bmw in it\n",
    "\n",
    "my_car_list = [\"ford\",\"vauxhall\",\"bmw\",\"mazda\",\"Renault\",\"audi\"]\n",
    "new_list = [x.upper() for x in my_car_list if \"bmw\" in x]\n",
    "print (new_list)\n",
    "\n",
    "#sort lists\n",
    "\n",
    "my_car_list.sort()\n",
    "print(my_car_list)\n",
    "\n",
    "#descending\n",
    "\n",
    "my_car_list.sort(reverse=True)\n",
    "print(my_car_list)\n",
    "\n",
    "#case-insensative sort\n",
    "\n",
    "my_car_list.sort(key = str.lower)\n",
    "print(my_car_list)\n",
    "\n",
    "#reverse\n",
    "\n",
    "my_car_list.reverse()\n",
    "print(my_car_list)\n",
    "\n",
    "#copy lists copy list to my_new_car_list\n",
    "\n",
    "my_new_car_list = my_car_list.copy()\n",
    "print(my_new_car_list)\n",
    "\n",
    "#join two lists\n",
    "\n",
    "joined_car_lists = my_car_list + my_car_list_updates\n",
    "print(joined_car_lists)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "Random Number\n2\n"
     ]
    }
   ],
   "source": [
    "# random number example\n",
    "\n",
    "import random\n",
    "print (\"Random Number\")\n",
    "print (random.randrange(1,19))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "print Types\n<class 'int'>\n<class 'int'>\n<class 'float'>\n<class 'complex'>\n<class 'list'>\n<class 'tuple'>\n<class 'range'>\n<class 'dict'>\n<class 'tuple'>\n<class 'str'>\n<class 'bytes'>\n<class 'bytearray'>\n<class 'memoryview'>\n"
     ]
    }
   ],
   "source": [
    "# print types\n",
    "\n",
    "print (\"print Types\")\n",
    "print(type(b)) #string\n",
    "print(type(a)) #int\n",
    "print(type(z)) #float\n",
    "print(type(j)) #complex\n",
    "print(type(fruits_list)) #list\n",
    "print(type(fruits_tuple)) #tuple\n",
    "print(type(k)) #range\n",
    "print(type(fruits_dict)) #dict\n",
    "print(type(fruits_set)) #set\n",
    "print(type(l)) #bool\n",
    "print(type(m)) #bytes\n",
    "print(type(n)) #bytearray\n",
    "print(type(p)) #memoryview\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}