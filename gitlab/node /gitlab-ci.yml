image: node:14

stages:
  - dev
  - test 
  - package
  - staging
  - production

variables:
  NODE_ENV: "production"

before_script:
  - npm install
  - echo $APP_VERSION > build/version.html

dev:
  stage: dev
  script:
    - echo "Building and deploying to Dev environment..."
    - npm run build
    - npm run deploy:dev
  only:
    - develop  # Replace with your development branch name

.build docker image:
  stage: package
  image: docker:20.10.12 
  services:
    - docker:20.10.12-dind
  script:
    - echo CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER $CI_REGISTRY --password-stdin
    - docker build -t $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:$APP_VERSION . 
    - docker image ls
    - docker push --all-tags $CI_REGISTRY_IMAGE

test docker image:
  stage: test
  image: curlimages/curl
  services:
    - name: $CI_REGISTRY_IMAGE:$APP_VERSION
      alias: website
  script:
    - curl http://website/version.html | grep $APP_VERSION

staging:
  stage: staging
  script:
    - echo "Building and deploying to Staging environment..."
    - npm run build
    - npm run deploy:staging
  only:
    - /^release-.*$/  # Adjust the pattern to match your staging branch naming convention

production:
  image: amazon/aws-cli:2.4.11
  entrypoint: [""]
  stage: production
  script:
    - aws --version
    - echo "Building and deploying to Production environment..."
    - npm run build
    - npm run deploy:production
  only:
    - master  # Production deployments are triggered from the master branch
  when: manual  # Manual step for production deployments
